#!/usr/bin/env bash

## VARIABLES
HERE=$(dirname $0)
HOSTNAME=$(hostname)
OS_NAME=$(uname -s)
OS_RELEASE=$(uname -r)
CPU_NAME=$(uname -m)
OS=${OS_NAME// /_}

case $1 in
    -v)
        VERBOSE=true
        shift
        ;;
    -h)
        printf -- "Usage: %s [-v] [<build-style>\n" "${0}"
        printf -- "\t\t-v: verbose operation\n"
        exit 1
        shift
        ;;
esac

BUILD_STYLE=${1:-debug}

# CONFIGURATION

shopt -s nullglob
src_files=("${HERE}"/src/*.cpp "${HERE}"/runtime/*.cpp)
c_src_files=("${HERE}"/libs/glew/src/glew.c)
c_src_files=(${c_src_files[@]} "${HERE}"/libs/ujson4c/src/*.c)
shopt -u nullglob

BUILD_TIMEBOX=5

## TOOLS
PATH="${HERE}/tools":"${HERE}/tools/${OS_NAME}":"${HERE}/tools/${OS_NAME}_${CPU_NAME}:$PATH"
export PATH

ASTYLE=astyle
GIT=git


BUILD_DIR="${HERE}"/builds/${HOSTNAME}
OBJ_DIR="${BUILD_DIR}"/obj

## IMPLEMENTATION

function require_dir() {
    mkdir -p "${BUILD_DIR}"
    mkdir -p "${OBJ_DIR}"
}

function rebuild_dir() {
    [[ -d "${BUILD_DIR}" ]] && rm -rf "${BUILD_DIR}"
    require_dir
}

function code_format() {
    astyle_output=$(
        ${ASTYLE} -n -Q --options=${HERE}/.astylerc \
            -r "${HERE}/src/*.*" -r "${HERE}/include/*.*" -r "${HERE}/runtime/*.*" |
            grep '^Formatted'
    )
    if [[ -n "${astyle_output}" ]]; then
        printf "astyle returned '%s', please commit these modifications\n" "${astyle_output}"
        exit 1
    fi
}

function check_clean() {
    git_output=$(${GIT} clean -n | grep '^Would remove')
    if [[ -n "${git_output}" ]]; then
        printf "WARNING some files were produced by the build outside of %s:\n%s\n" "${BUILD_DIR}" "${git_output}"
    fi
}

function compile_default() {
    printf "define a compilation function for your OS ${OS} or host ${HOSTNAME}!\n"
    exit 1
}

function compile_gxxlike() {
    CFLAGS="-isystem ${HERE}/include $CFLAGS"
    CFLAGS="-Wall -Wextra -Werror $CFLAGS"
    CFLAGS="$CFLAGS -Wno-padded -Wno-unused-parameter -Wno-conversion"

    if [[ -n "${VERBOSE}" ]]; then
        CFLAGS="$CFLAGS -v"
    fi

    if [[ "debug" == "${BUILD_STYLE}" ]]; then
        CFLAGS="$CFLAGS -g"
    fi

    if [[ "release" == "${BUILD_STYLE}" ]]; then
        CFLAGS="$CFLAGS -O3"
    fi

    if [[ "static-analysis" == "${BUILD_STYLE}" ]]; then
        CFLAGS="$CFLAGS --analyze"
        LDFLAGS=""
        "${CXX}" -std=c11 ${CFLAGS} ${LDFLAGS} "${c_src_files[@]}"
        "${CXX}" -std=c++11 ${CFLAGS} ${LDFLAGS} "${src_files[@]}"
        return
    fi

    for srcf in "${c_src_files[@]}"; do
        local obj="${OBJ_DIR}/"$(basename "${srcf}").o
        [[ ! -e $obj ]] || (printf 'ERROR %s already exists' "$obj"; exit 1)
        "${CC}" -c -std=c11 ${CFLAGS} "$srcf" -o "$obj"
        if [[ $? -ne 0 ]]; then
          printf 'ERROR compiling %s\n' "$srcf"
          exit 1
        fi
    done

    for srcf in "${src_files[@]}"; do
        local obj="${OBJ_DIR}/"$(basename "${srcf}").o
        [[ ! -e $obj ]] || (printf 'ERROR %s already exists' "$obj"; exit 1)
        "${CXX}" -c -std=c++11 ${CFLAGS} "$srcf" -o "$obj"
        if [[ $? -ne 0 ]]; then
          printf 'ERROR compiling %s\n' "$srcf"
          exit 1
        fi
    done

    "${CXX}" -std=c++11 ${CFLAGS} ${LDFLAGS} "${OBJ_DIR}"/*.o -o "${BUILD_DIR}/main"
}

function compile_clang() {
    CFLAGS="$CFLAGS -stdlib=libc++"
    CXX=clang++
    CC=clang
    compile_gxxlike
}

function compile_Darwin() {
    src_files=(${src_files[@]}
        "${HERE}"/runtime/Darwin/*.cpp
        "${HERE}"/runtime/open_window_with_glfw/*.cpp)
    CFLAGS="$CFLAGS -Wno-deprecated-declarations"
    CFLAGS="$CFLAGS -I${HERE}/libs/glew/include"
    CFLAGS="$CFLAGS -I${HERE}/libs/ujson4c/include"
    LDFLAGS="$LDFLAGS -framework Cocoa -framework IOKit -framework OpenGL -framework CoreAudio"
    LDFLAGS="$LDFLAGS -L${HERE}/libs/Darwin_${CPU_NAME}"
    CFLAGS="$CFLAGS -I${HERE}/libs"
    LDFLAGS="$LDFLAGS -lglfw3"
    compile_clang
}

function reg_query() {
    path=$1
    value_name=$2
    reg query "$path" //v "$value_name" 2> /dev/null | awk -F'    ' '/'"${value_name}"'/ {print $4}'
}

function posix_path() {
    windows_path="$1"
    echo $(cd "$windows_path" ; pwd -P)
}

function windows_path() {
    posix_path="$1"
    echo $(cd "$posix_path" ; pwd -W) | sed -e 's,\/,\\,g'
}

function set_vcenv() {
    VS_WINDIR="$1"
    VS_ARCH="$2"

    (cmd <<EOF
bash -c set > "${BUILD_DIR}"/vcvarsall-prev.env
"${VS_WINDIR}/vcvarsall.bat" ${VS_ARCH}
bash -c set > "${BUILD_DIR}"/vcvarsall-after.env
EOF
    ) > /dev/null

    diff -u "${BUILD_DIR}"/vcvarsall-prev.env "${BUILD_DIR}"/vcvarsall-after.env | grep -e '^\+[^\+]' | cut -c 2- | grep -v -e '^\!' > "${BUILD_DIR}/vc.env"

    . ${BUILD_DIR}/vc.env
}

function compile_vstudio() {
    vstudio_ver="${1:?missing vstudio version}"
    vstudio_arch="${2:?missing architecture}"
    VS_WINDIR=$(reg_query "HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\SxS\\VC7" "$vstudio_ver")
    if [[ -z $VS_WINDIR ]]; then
        printf 'ERROR cannot find visual studio version: %s\n' "$vstudio_ver"
        exit 1
    fi


    set_vcenv "${VS_WINDIR}" "${vstudio_arch}"

    CL_CMD=${CL_CMD:="cl.exe"}
    LIB_CMD="lib.exe"
    LINK_CMD="link.exe"

    CLFLAGS="$CLFLAGS //nologo //EHsc //W4 //WX //wd4996 //wd4068 //wd4100 //Zc:forScope"
    LINK_FLAGS="$LINK_FLAGS //nologo"

    BUILD_WINDIR="$(windows_path "${BUILD_DIR}/")"
    MAIN_EXE="$BUILD_WINDIR"\\main.exe
    OBJ_WINDIR="$(windows_path "${OBJ_DIR}/")"
    export LIB
    export INCLUDE

    for srcf in "${src_files[@]}"; do
        "${CL_CMD}" $CLFLAGS "$srcf" //c //Iinclude //Fo"${OBJ_WINDIR}"\\
        if [[ $? -ne 0 ]]; then
          printf 'ERROR compiling %s\n' "$srcf"
          exit 1
        fi
    done

    for srcf in "${c_src_files[@]}"; do
        "${CL_CMD}" $CLFLAGS "$srcf" //c //Iinclude //Fo${OBJ_WINDIR}\\
        if [[ $? -ne 0 ]]; then
          printf 'ERROR compiling %s\n' "$srcf"
          exit 1
        fi
    done

    "${LINK_CMD}" ${LINK_FLAGS} //OUT:${MAIN_EXE} "${OBJ_DIR}"/*.obj
    return
}

function compile_NT() {
    local vstudio_arch=x86
    local native_libs_dir=${HERE}/libs/NT_${vstudio_arch}
    src_files=(${src_files[@]}
        "${HERE}"/runtime/NT/*.cpp
        "${HERE}"/runtime/open_window_with_glfw/*.cpp)
    CLFLAGS="$CLFLAGS //I""$(windows_path "${HERE}"/libs/glew/include)"
    CLFLAGS="$CLFLAGS //DGLEW_STATIC"
    CLFLAGS="$CLFLAGS //I""$(windows_path "${HERE}"/libs/ujson4c/include)"
    CLFLAGS="$CLFLAGS //I""$(windows_path "${HERE}/libs")"

    LINK_FLAGS="opengl32.lib"
    LINK_FLAGS="$LINK_FLAGS //LIBPATH:""$(windows_path "${native_libs_dir}")"

    # glfw3
    CLFLAGS="$CLFLAGS //MD"
    LINK_FLAGS="$LINK_FLAGS gdi32.lib user32.lib glfw3.lib"

    # audio using WASAPI
    LINK_FLAGS="$LINK_FLAGS ole32.lib"
    compile_vstudio "12.0" "${vstudio_arch}"
}

# windows 7 on msys with vstudio express 2013
function compile_MINGW32_NT-6.1() {
    compile_NT
}

# windows 8 on msys with vstudio express 2013
function compile_MINGW32_NT-6.2() {
    compile_NT
}

function compile_CLIENT0170() {
#    CL_CMD="/c/Program Files (x86)/LLVM/bin/clang-cl.exe"
#    CLFLAGS="-Qunused-arguments //fallback //D_CRT_SECURE_NO_WARNINGS"
    compile_NT
}

function compile() {
    if [[ -z "$src_files" ]]; then
        printf "ERROR no source files? %s\n" "${src_files}"
    fi

    for f in "${src_files[@]}"; do
        if [[ ! -e ${f} ]] ; then
            printf "ERROR could not find source file %s in %s\n" "${f}" "${src_files}"
            exit 1
        fi
    done

    if [[ "function" = $(type -t "compile_${HOSTNAME}") ]]; then
        compile_${HOSTNAME}
        return
    fi

    if [[ "function" = $(type -t "compile_${OS}") ]]; then
        compile_${OS}
        return
    fi

    compile_default
}

function timed_compile() {
    ts_start=$(date +'%s')
    compile
    RC=$?
    ts_end=$(date +'%s')
    ts_elapsed=$(($ts_end - $ts_start))

    cat=INFO
    if [[ ts_elapsed -gt ${BUILD_TIMEBOX} ]]; then
        cat="ERROR"
    fi
    printf '%s compilation took %d seconds\n' $cat $ts_elapsed
    return $RC
}

function show_todo() {
    grep -e 'TODO:' "${src_files[@]}" | while read match ; do
        printf "WARNING %s\n" "$match"
    done
}

printf "INFO building on %s (os: %s, cpu: %s, build style: %s)\n" "${HOSTNAME}" "${OS}" "${CPU_NAME}" "${BUILD_STYLE}"

if [[ -n $VERBOSE ]]; then
    set -x
fi

rebuild_dir && timed_compile && code_format && show_todo && check_clean

if [[ $? -ne 0 ]]; then
    printf "ERROR error\n"
    exit 1
fi

printf "INFO success\n"
printf "INFO results:\n"
find ${BUILD_DIR} -type f
